#Ver 2.1.1
from elasticsearch import Elasticsearch
import json
import re
import copy
import uuid
import sys
import requests
import time
from datetime import datetime
from datetime import date
from datetime import timedelta
import dateutil.parser as dp
import ipaddress
from thehive4py.api import TheHiveApi
from thehive4py.models import Alert, AlertArtifact, CustomFieldHelper
from thehive4py.query import *
es_hsoc = Elasticsearch("https://10.0.40.44:9200", ca_certs="/home/ctgsadmin/ctg/hcapollo-standalone/gen-cert/certs/ca/ca.crt", verify_certs=False, http_auth=("fe_hsoc","Hsoc@2023"))

#set static customer id in line 283  of this code
#dict of customer_id and API key
sirp_creds = {'ctg': TheHiveApi('http://10.0.40.44:9005', '1UxUMSFqNDh01j99+lhl8T7gwOYMCJxL')
}

#debug
# for kh in sirp_creds:
    # print (sirp_creds[kh].get_alert('abc').json())

mapping = {
    "ancestors_id": "kibana.alert.ancestors.id",
    "customer_id": "data_stream.namespace",
    "site": "site",
    "tactic": "kibana.alert.rule.threat.tactic.name",
    "tactic_id": "kibana.alert.rule.threat.tactic.id",
    "layer": "kibana.alert.original_event.dataset",
    "priority": "",
    "alert_source": "source.address",
    "alert_dest": "host.hostname",
    "severity": "kibana.alert.severity",
    "tags": "kibana.alert.rule.tags",
    "root_source": "kibana.alert.original_event.dataset",
    "object": "kibana.alert.rule.parameters.query",
    "object_type": "kibana.alert.rule.category",
    "object_context": "kibana.alert.reason",
    "alert_time": "@timestamp",
    "title": "kibana.alert.rule.name",
    "desc": "kibana.alert.rule.description",
    "type": "kibana.alert.rule.type"  ,
    "user_name": "user.name",
    "alert_cmd": "process.command_line",
    "alert_process": "process.name",
    "guide_investigate": "kibana.alert.rule.description",
    "signal_id": "_id"
}
def get_list_signal_id(customer_id,timeback_in_ms):
    #Get windows time sync from lastync to now, if cannot find lastsync then sync from last 10 minutes from now
    t2 = int(time.time())*1000+10*60*1000
    timeback = timeback_in_ms
    t1 = t2 - timeback

    updatebetween = Between("updatedAt", t1, t2)
    createbetween = Between("createdAt", t1, t2)
    query = Or(
       updatebetween,
       createbetween
    )
    response = sirp_creds[customer_id].find_alerts(query=query)
    list_signal_id = []
    # Print the JSON response
    data = response.json()
    for record in data:
        try:
            list_signal_id.append(record['customFields']['signal_id']['string'])
        except:
            print('Signal ID not found (alert not generated by Elastic SIEM)')
    return list_signal_id
def hive_send(sirp_creds,customer_id,site,tactic,tactic_id,layer,priority,alert_source,alert_dest,title,severity,tags,desc,type,root_source,object,object_type,object_context,alert_time,user_name,alert_cmd,alert_process,guide_investigate,signal_id):
    api = sirp_creds[customer_id]
    tags=[]
    artifacts = []
    try:
      alert_source = ipaddress.ip_address(alert_source)
      artifacts.append(AlertArtifact(dataType='ip', data=alert_source))
    except:
      print("alert_source is not an ip")
    #artifacts.append(AlertArtifact(dataType='object', data=object))
    #processing unstructured customer field
    if customer_id == "na":
        customer_id = "default"
    print ("CUSTOMER ID AFTER CALL *******-> "+ str(customer_id))
    print ("tags is: "+ str(tags))
    tags.append('kH='+customer_id)
    try:
        tags.remove("Elastic")
    except:
        print("fail to remove Elastic")
    print ("tags after append is: "+ str(tags))
    if (user_name != 'na'):
      title = title + " | User: "+ str(user_name)
    # prepair description
    desc = " - Alert: " +str(title)+ " \
    \n\n - Description: "+str(desc)+" \
    \n\n - Query: ```"+str(object)+" \
    ```\n\n - Object_type: ```"+str(object_type)+ "\
    ```\n\n - Object_context: ```"+str(object_context)+ "\
    ```\n\n - ATT&CK Tatic: " +str(tactic)+"\
    \n\n - TacticID: " + str(tactic_id)+"\
    \n\n - Layer: " +str(layer)+ "\
    \n\n - Source: "+str(alert_source)+ "\
    \n\n - Dest: "+str(alert_dest) +"\
    \n\n - User.name: "+str(user_name) +"\
    \n\n - Process name: "+str(alert_process) +"\
    \n\n - Process Commandline: "+str(alert_cmd) +"\
    \n\n - Original_time: "+str(alert_time)+ "\n\n   (Actions button Below) \n\n_________________\
    \n\n - [Click to get alerts on SIEM](http://10.0.40.44:8443/app/security/alerts?sourcerer=%28default:%28id:security-solution-default,selectedPatterns:!%28.alerts-security.alerts-default%29%29%29&timerange=%28global:%28linkTo:!%28timeline%29,timerange:%28from:%272023-09-27T17:00:00.000Z%27,fromStr:now%2Fd,kind:absolute,to:%272023-09-28T16:59:59.999Z%27,toStr:now%2Fd%29%29,timeline:%28linkTo:!%28global%29,timerange:%28from:%272023-09-27T17:00:00.000Z%27,fromStr:now%2Fd,kind:absolute,to:%272023-09-28T16:59:59.999Z%27,toStr:now%2Fd%29%29%29&pageFilters=!%28%28exclude:!f,existsSelected:!f,fieldName:kibana.alert.workflow_status,selectedOptions:!%28open%29,title:Status%29,%28exclude:!f,existsSelected:!f,fieldName:kibana.alert.severity,selectedOptions:!%28%29,title:Severity%29,%28exclude:!f,existsSelected:!f,fieldName:user.name,selectedOptions:!%28%29,title:User%29,%28exclude:!f,existsSelected:!f,fieldName:host.name,selectedOptions:!%28%29,title:Host%29%29)" + "\
    \n\n - [Click to get alerts on SIEM by rule](http://10.0.40.44:8443/app/security/alerts?sourcerer=%28default:%28id:security-solution-default,selectedPatterns:!%28.alerts-security.alerts-default%29%29%29&timerange=%28global:%28linkTo:!%28timeline%29,timerange:%28from:%272023-09-27T17:00:00.000Z%27,fromStr:now%2Fd,kind:absolute,to:%272023-09-28T16:59:59.999Z%27,toStr:now%2Fd%29%29,timeline:%28linkTo:!%28global%29,timerange:%28from:%272023-09-27T17:00:00.000Z%27,fromStr:now%2Fd,kind:absolute,to:%272023-09-28T16:59:59.999Z%27,toStr:now%2Fd%29%29%29&pageFilters=!%28%28exclude:!f,existsSelected:!f,fieldName:kibana.alert.workflow_status,selectedOptions:!%28open%29,title:Status%29,%28exclude:!f,existsSelected:!f,fieldName:kibana.alert.severity,selectedOptions:!%28%29,title:Severity%29,%28exclude:!f,existsSelected:!f,fieldName:user.name,selectedOptions:!%28%29,title:User%29,%28exclude:!f,existsSelected:!f,fieldName:host.name,selectedOptions:!%28%29,title:Host%29%29)"+ "\
    \n\n - [Click to search alerts by hostname SIEM](http://10.0.40.44:8443/app/security/alerts?sourcerer=%28default:%28id:security-solution-default,selectedPatterns:!%28.alerts-security.alerts-default%29%29%29&timerange=%28global:%28linkTo:!%28timeline%29,timerange:%28from:%272023-09-27T17:00:00.000Z%27,fromStr:now%2Fd,kind:absolute,to:%272023-09-28T16:59:59.999Z%27,toStr:now%2Fd%29%29,timeline:%28linkTo:!%28global%29,timerange:%28from:%272023-09-27T17:00:00.000Z%27,fromStr:now%2Fd,kind:absolute,to:%272023-09-28T16:59:59.999Z%27,toStr:now%2Fd%29%29%29&pageFilters=!%28%28exclude:!f,existsSelected:!f,fieldName:kibana.alert.workflow_status,selectedOptions:!%28open%29,title:Status%29,%28exclude:!f,existsSelected:!f,fieldName:kibana.alert.severity,selectedOptions:!%28%29,title:Severity%29,%28exclude:!f,existsSelected:!f,fieldName:user.name,selectedOptions:!%28%29,title:User%29,%28exclude:!f,existsSelected:!f,fieldName:host.name,selectedOptions:!%28%29,title:Host%29%29) \n\n ____________________ \n\n - Guide Investigate: \n"+ guide_investigate

    


    # Prepare the custom fields
    customFields = CustomFieldHelper()\
        .add_string('kH', customer_id)\
        .add_string('site', site)\
        .add_string('mitre_tactic', tactic)\
        .add_string('layer', layer)\
        .add_string('priority', priority)\
        .add_string('source', alert_source)\
        .add_string('dest', alert_dest)\
        .add_string('alert_source', alert_source)\
        .add_string('alert_dest', alert_dest)\
        .add_string('signal_id',signal_id)\
        .add_string('rule_name',str(title))\
        .build()
    print (customFields)
    # Prepare the Alert
    alert_unix_time = (int((datetime.strptime(alert_time, '%Y-%m-%dT%H:%M:%S.%fZ')- datetime(1970, 1, 1)).total_seconds()*1000))
    sourceRef = str(signal_id) #str(uuid.uuid4())[0:6]
    alert = Alert(title=title +" | Context: "+object_context,
                  date=alert_unix_time,
                  severity=severity,
                  tags=tags,
                  description=desc,
                  type=type,
                  source=root_source,
                  sourceRef=sourceRef,
                  artifacts=artifacts,
                  customFields=customFields)

    # Create the Alert
    print('Create Alert')
    print('-----------------------------')
    id = None
    response = api.create_alert(alert)
    if response.status_code == 201:
        print(json.dumps(response.json(), indent=4, sort_keys=True))
        print('')
        id = response.json()['id']
    else:
        print('ko: {}/{}'.format(response.status_code, response.text))
        #sys.exit(0)


    # Get all the details of the created alert
    print('Get created alert {}'.format(id))
    print('-----------------------------')
    response = api.get_alert(id)
    if response.status_code == requests.codes.ok:
        print(json.dumps(response.json(), indent=6, sort_keys=True))
        print('')
    else:
        print('ko: {}/{}'.format(response.status_code, response.text))  

def getCustomerFromIndex(index):
    m = re.search('.internal.alerts-([a-z]{1,})',index).group(1)
    print (m)
    return (m)
def getValuefStrKey(json,keystr):
    arrstr = keystr.split('-')
    if(len(arrstr)>1):
        ckey= arrstr[0]
        nest_key = arrstr[1]
        return json[ckey][nest_key]
    return json[keystr]    
    #print ("ARR STR:"+str(arrstr))
#    try:
#    for nest_key in arrstr:
#        try: 
#            json = json[ckey]
#        except:
#            json = json[nest_key][0]
 #       print ("Nested KEY: "+ str(nest_key))
#        return json[keystr]
 #   except:
 #   return "na"



def extractLayer(dataset):
    if "network" in dataset:
        return "Network"
    if "host" in dataset:
        return "Host"
    if "data" in dataset:
        return "Data"
    if "app" in dataset:
        return "App"
    return "Host"

def convertSeveritySIRP(sev):
    if sev == "critical":
        return 4
    if sev == "high":
        return 3
    if sev == "medium":
        return 2
    if sev == "low":
        return 1
    else:
        return 2
#Push Alert to SIRP
def push_alert(alert_dict,list_signal_id):
    print (list_signal_id)
    n=0
    for alert in alert_dict:
        output = copy.deepcopy(mapping)
        index = alert["_index"]
        #json_str = json.dumps(alert["_source"],indent=2)
        
        #json_object = json.loads(json_str)
        #print (json_str+ "\n________________________________________________")

        #print ("rule.name:" + getValuefStrKey(alert["_source"],"signal.rule.name"))
        #print (str(alert['_source']))
        #print ("Index name: " + index)
        output['ancestors_id'] = alert['_source']['kibana.alert.ancestors'][0]['id']
        output['customer_id'] = 'ctg'
        output['site'] = 'dc'
        try:
            output['tactic'] = alert['_source']['kibana.alert.rule.threat'][0]['tactic']['name']
        except:
            output['tactic'] = 'na'
        try: 
            output['tactic_id'] = alert['_source']['kibana.alert.rule.threat'][0]['tactic']['id']
        except:
            output['tactic_id'] = 'na'
        output['layer'] = alert['_source']['kibana.alert.original_event.dataset']
        output['priority'] = '10'
        try: 
            output['alert_source'] = alert['_source']['host']['hostname']
        except:
            output['alert_source'] = 'na'
        try:
            output['alert_dest'] = alert['_source']['host']['hostname']
        except:
            output['alert_dest'] = 'na'
        output['severity'] = alert['_source']['kibana.alert.severity']
        output['tags'] = alert['_source']['kibana.alert.rule.tags']
        output['root_source'] = alert['_source']['kibana.alert.original_event.dataset']
        output['object'] = alert['_source']['kibana.alert.rule.parameters']['query']
        output['object_type'] = alert['_source']['kibana.alert.rule.category']
        output['object_context'] = alert['_source']['kibana.alert.reason']
        output['alert_time'] = alert['_source']['@timestamp']
        output['title'] = alert['_source']['kibana.alert.rule.name']
        output['desc'] = alert['_source']['kibana.alert.rule.description']
        output['type'] = alert['_source']['kibana.alert.rule.type']
        try:
            output['user_name'] = alert['_source']['user']['name']
        except:
            output['user_name'] = 'na'
        try:
            output['alert_cmd'] = alert['_source']['process']['command_line']
        except KeyError:
            output['alert_cmd'] = 'na'
        try:
            output['alert_process'] = alert['_source']['process']['name']
        except:
            output['alert_process'] =  'na'
        output['guide_investigate'] = alert['_source']['kibana.alert.rule.description']
        output['signal_id'] = alert['_id']
       
   
        output['layer'] = extractLayer(output['layer'])
        output['severity'] = convertSeveritySIRP(alert['_source']['kibana.alert.severity'])
        # if output['type'] == 'query':
            # output['type'] = 'ThreatIntel_query'
        if output['title'] == "Malware Prevention Alert":
            output['title'] = output['title'] +' | Hash: '+ getValuefStrKey(alert["_source"],'file.hash.sha256')
            output['alert_source'] = 'machine process'
            output['alert_dest'] = getValuefStrKey(alert["_source"],'host.name')
            output['object'] = getValuefStrKey(alert["_source"],'file.path')
            output['object_type'] = 'file.path'
            output['type'] = 'EDR_Detection'
        print (alert["_source"])
        try:
            if output['user_name'] == 'na':
                output['user_name'] = alert["_source"]["user.name"]
            if output['alert_dest'] == 'na':
                output['alert_dest'] = alert["_source"]["agent.hostname"]
            if output['title'] == 'Multi authentication fail by a user':
                output['title'] = output['title'] +" "+  str(output['user_name']) 
        except:
            print ("Debug2")
        #ThreatIntel Source DEST
        try:
            if "Threat Intel" in output['title']:          
                output['alert_source'] = alert["_source"]["source"]["ip"]
                output['alert_dest'] = alert["_source"]["destination"]["ip"]
                output['title'] = output['title'] + "| Source: " + output['alert_source'] + "| Dest: " + output['alert_dest'] 
        except:
            print ("Debug3")
        
        #Externals Alert 
        try:
            if "External Alerts" in output['title']:
                output['title'] = "External Alerts " + alert["_source"]["event"]["module"] + " action: " + alert["_source"]["event"]["action"]
                output['guide_investigate'] = "Alert generated by event.kind == alert in Original logs. Please check raw log of the source alert"
        except:
            print ("Debug4")
        #if (output['customer_id'] != "minhlong"):
        #    continue
        #print (sirp_creds)    
        #print (output)
        print ("____________") 
        print ("Alert SOURCE: "+output['alert_source'])
        print ("Alert DEST: "+output['alert_dest'])
        print ("____________") 
        #get ID of alert to SIRP
        output['signal_id'] = alert['_id']
        output['customer_id'] = "ctg" 
        if (output['signal_id'] not in list_signal_id):
          print ("Alert signal SIEM not in SIRP")
          hive_send(sirp_creds,output['customer_id'],output['site'],output['tactic'],output['tactic_id'],output['layer'],output['priority'],output['alert_source'],output['alert_dest'],output['title'],output['severity'],output['tags'],output['desc'],output['type'],output['root_source'],output['object'],output['object_type'],output['object_context'],output['alert_time'],output['user_name'],output['alert_cmd'],output['alert_process'],output['guide_investigate'],output['signal_id'])
        else:
          print ("Alert signal is in SIRP, SKIP push to ignore duplicate")
        n=n+1
        
        
        print("----------------------Process "+str(n)+" Alert------------------------")

#MAIN
body_query =  {
        "query": {
            "bool": {
                "must": [
                    {"range": {
                        "@timestamp": {
                        "gte": "now-5m",
                        "lte": "now"
                    }
            }
            }
          ]
        }
      }
    }
run = es_hsoc.search(index=".siem-signals-*",size=1000,body=body_query, request_timeout = 200)
alert_dict =(run["hits"]["hits"])
customer_id = 'ctg'
print ("Number of alert queried:"+str(len(alert_dict)))
list_signal_id = get_list_signal_id(customer_id,15*60*1000)
time.sleep(1.5)
push_alert(alert_dict,list_signal_id)
print ("Number of alert queried:"+str(len(alert_dict)))
print("++++++++END+++++++++")
"""
mapping = {
    "ancestors_id": "signal.ancestors.id",
	"customer_id": "data_stream.namespace",
    "site": "site",
    "tactic": "signal.rule.threat.tactic.name",
    "tactic_id": "signal.rule.threat.tactic.id",
    "layer": "event.dataset",
    "priority": "",
    "alert_source": "source.address",
    "alert_dest": "destination.address",
    "severity": "kibana.alert.severity",
    "tags": "signal.rule.tags",
    "root_source": "signal.original_event.dataset",
    "object": "signal.rule.query",
    "object_type": "signal.parents.type",
    "object_context": "signal.reason",
	"alert_time": "@timestamp",
    "title": "signal.rule.name",
    "desc": "signal.rule.description",
    "type": "signal.rule.type"   
}
"""